[{"content":"Welcome to my website! I\u0026rsquo;m really happy you stopped by.\n","date":null,"permalink":"/","section":"","summary":"","title":""},{"content":"","date":null,"permalink":"/tags/","section":"","summary":"","title":""},{"content":"","date":null,"permalink":"/tags/ai/","section":"","summary":"","title":"AI"},{"content":"","date":null,"permalink":"/tags/algorithms/","section":"","summary":"","title":"Algorithms"},{"content":"Overview #This project is a classification model that uses an Artificial Neural Network (ANN) to recognize and categorize Amazigh numbers.\nFeatures # Trained on Amazigh numeric dataset. Achieves high accuracy with optimized ANN architecture. Works with handwritten and digital numbers. Technologies Used # Python TensorFlow NumPy Repository #Github - Amazigh numbers Classification using ANN from scratch\n","date":"6 February 2025","permalink":"/projects/sugam/amazigh_ann/","section":"Projects","summary":"A neural network model for recognizing Amazigh numbers.","title":"Amazigh Numbers Classification with ANN"},{"content":"","date":null,"permalink":"/tags/ann/","section":"","summary":"","title":"ANN"},{"content":"","date":null,"permalink":"/tags/data-visualization/","section":"","summary":"","title":"Data Visualization"},{"content":"","date":null,"permalink":"/tags/full-stack/","section":"","summary":"","title":"Full Stack"},{"content":"Overview #Gallic War Map is a historical visualization project that maps out the events and locations of Julius Caesar\u0026rsquo;s Gallic Wars.\nFeatures # Interactive historical map. Key locations with descriptions. Timeline of battles. Technologies Used # JavaScript Leaflet.js GeoJSON QGIS Repository #GitHub - Gallic War Map\nInteractive Site\n","date":"6 February 2025","permalink":"/projects/sugam/gallic_war/","section":"Projects","summary":"A historical map illustrating key locations in Julius Caesar\u0026rsquo;s Gallic War.","title":"Gallic War Map"},{"content":"","date":null,"permalink":"/tags/history/","section":"","summary":"","title":"History"},{"content":"","date":null,"permalink":"/tags/machine-learning/","section":"","summary":"","title":"Machine Learning"},{"content":"","date":null,"permalink":"/tags/mapping/","section":"","summary":"","title":"Mapping"},{"content":"","date":null,"permalink":"/tags/mern/","section":"","summary":"","title":"MERN"},{"content":"Overview #This project is a fully functional blog website developed using the MERN stack. It allows users to create, edit, and delete posts with a user-friendly interface.\nFeatures # User authentication and authorization. CRUD operations for blog posts. Responsive UI with a modern design. Technologies Used # MongoDB Express.js React.js Node.js Repository #GitHub - Gallic War Map\n","date":"6 February 2025","permalink":"/projects/sugam/mern_blog/","section":"Projects","summary":"A full-stack blog website built with the MERN stack.","title":"MERN Website"},{"content":"Overview #ML Models from Scratch is a collection of classic machine learning models implemented without high-level libraries like Scikit-Learn or TensorFlow.\nFeatures # Implementation of basic and advanced ML algorithms. No external ML libraries used. Educational resource for learning ML concepts. Technologies Used # Python NumPy Matplotlib Repository #GitHub - ML models built from scratch ","date":"6 February 2025","permalink":"/projects/sugam/ml_from_scratch/","section":"Projects","summary":"Implementation of machine learning models from scratch without libraries.","title":"ML Models from Scratch"},{"content":"","date":null,"permalink":"/tags/nepal/","section":"","summary":"","title":"Nepal"},{"content":"Overview #Nepal Hydropower Map is a project that visualizes Nepal\u0026rsquo;s hydropower projects on an interactive map. It provides insights into hydropower distribution and project details.\nFeatures # Interactive map for navigation. Details of various hydropower plants. Data visualization for energy production. Technologies Used # Python Leaflet.js GeoJSON QGIS Repository #GitHub - Nepal Hydropower Map\nInteractive Site\n","date":"6 February 2025","permalink":"/projects/sugam/nepal_hydro/","section":"Projects","summary":"An interactive map displaying hydropower projects in Nepal.","title":"Nepal Hydropower Map"},{"content":"This section contains all my current projects.\n","date":null,"permalink":"/projects/","section":"Projects","summary":"","title":"Projects"},{"content":"","date":null,"permalink":"/tags/python/","section":"","summary":"","title":"Python"},{"content":"","date":null,"permalink":"/tags/visualization/","section":"","summary":"","title":"Visualization"},{"content":"","date":null,"permalink":"/tags/web-development/","section":"","summary":"","title":"Web Development"},{"content":"","date":null,"permalink":"/tags/deep-learning/","section":"","summary":"","title":"Deep Learning"},{"content":"Nepali Spelling Correction Using Transformer Models #Introduction #Nepali, being a low-resource language, lacks robust spelling correction tools. This project leverages transformer-based sequence-to-sequence models to build an accurate Nepali spelling correction system.\nSummary #This project explores the effectiveness of transfer learning for Nepali spelling correction by fine-tuning transformer-based models. It compares three distinct models: Varta-T5, mT5-small, and mBART. The dataset is prepared using pseudo-random synthetic error generation techniques from a large-scale Nepali text corpus. The results demonstrate the strengths and weaknesses of each model in different domains, highlighting mT5-small\u0026rsquo;s superior domain-specific accuracy and mBART\u0026rsquo;s generalization ability.\nFeatures # Fine-tuned transformer models for Nepali spelling correction Synthetic dataset generation for training and evaluation Performance comparison of multiple transformer architectures Deployed via HuggingFace for easy inference Repository #GitHub - Nepali Spelling Correction\n","date":"6 February 2024","permalink":"/projects/sugam/nepali_spelling_correction/","section":"Projects","summary":"","title":"Nepali Spelling Correction Using Transformer Models"},{"content":"","date":null,"permalink":"/tags/nlp/","section":"","summary":"","title":"NLP"},{"content":"","date":null,"permalink":"/tags/transformers/","section":"","summary":"","title":"Transformers"},{"content":"","date":null,"permalink":"/categories/","section":"","summary":"","title":""},{"content":"All the latest posts are here !!\n","date":null,"permalink":"/posts/","section":"Blog","summary":"","title":"Blog"},{"content":"","date":null,"permalink":"/categories/category1/","section":"","summary":"","title":"Category1"},{"content":"","date":null,"permalink":"/categories/category2/","section":"","summary":"","title":"Category2"},{"content":"","date":null,"permalink":"/tags/checking/","section":"","summary":"","title":"Checking"},{"content":"","date":null,"permalink":"/tags/first/","section":"","summary":"","title":"First"},{"content":"","date":null,"permalink":"/categories/latin/","section":"","summary":"","title":"Latin"},{"content":"Dillinger #The Last Markdown Editor, Ever #\rDillinger is a cloud-enabled, mobile-ready, offline-storage compatible, AngularJS-powered HTML5 Markdown editor.\nType some Markdown on the left See HTML in the right ✨Magic ✨ Features # Import a HTML file and watch it magically convert to Markdown Drag and drop images (requires your Dropbox account be linked) Import and save files from GitHub, Dropbox, Google Drive and One Drive Drag and drop markdown and HTML files into Dillinger Export documents as Markdown, HTML and PDF Markdown is a lightweight markup language based on the formatting conventions that people naturally use in email. As John Gruber writes on the Markdown site\nThe overriding design goal for Markdown\u0026rsquo;s formatting syntax is to make it as readable as possible. The idea is that a Markdown-formatted document should be publishable as-is, as plain text, without looking like it\u0026rsquo;s been marked up with tags or formatting instructions.\nThis text you see here is *actually- written in Markdown! To get a feel for Markdown\u0026rsquo;s syntax, type some text into the left window and watch the results in the right.\nTech #Dillinger uses a number of open source projects to work properly:\nAngularJS - HTML enhanced for web apps! Ace Editor - awesome web-based text editor markdown-it - Markdown parser done right. Fast and easy to extend. Twitter Bootstrap - great UI boilerplate for modern web apps node.js - evented I/O for the backend Express - fast node.js network app framework @tjholowaychuk Gulp - the streaming build system Breakdance - HTML to Markdown converter jQuery - duh And of course Dillinger itself is open source with a public repository on GitHub.\nInstallation #Dillinger requires Node.js v10+ to run.\nInstall the dependencies and devDependencies and start the server.\ncd dillinger npm i node app For production environments\u0026hellip;\nnpm install --production NODE_ENV=production node app Plugins #Dillinger is currently extended with the following plugins. Instructions on how to use them in your own application are linked below.\nPlugin README Dropbox plugins/dropbox/README.md GitHub plugins/github/README.md Google Drive plugins/googledrive/README.md OneDrive plugins/onedrive/README.md Medium plugins/medium/README.md Google Analytics plugins/googleanalytics/README.md Development #Want to contribute? Great!\nDillinger uses Gulp + Webpack for fast developing. Make a change in your file and instantaneously see your updates!\nOpen your favorite Terminal and run these commands.\nFirst Tab:\nnode app Second Tab:\ngulp watch (optional) Third:\nkarma test Building for source #For production release:\ngulp build --prod Generating pre-built zip archives for distribution:\ngulp build dist --prod Docker #Dillinger is very easy to install and deploy in a Docker container.\nBy default, the Docker will expose port 8080, so change this within the Dockerfile if necessary. When ready, simply use the Dockerfile to build the image.\ncd dillinger docker build -t \u0026lt;youruser\u0026gt;/dillinger:${package.json.version} . This will create the dillinger image and pull in the necessary dependencies. Be sure to swap out ${package.json.version} with the actual version of Dillinger.\nOnce done, run the Docker image and map the port to whatever you wish on your host. In this example, we simply map port 8000 of the host to port 8080 of the Docker (or whatever port was exposed in the Dockerfile):\ndocker run -d -p 8000:8080 --restart=always --cap-add=SYS_ADMIN --name=dillinger \u0026lt;youruser\u0026gt;/dillinger:${package.json.version} Note: --capt-add=SYS-ADMIN is required for PDF rendering.\nVerify the deployment by navigating to your server address in your preferred browser.\n127.0.0.1:8000 License #MIT\nFree Software, Hell Yeah!\n","date":"25 January 2022","permalink":"/posts/2025/post-first-my/","section":"Blog","summary":"Checking if all the rendering is ok.","title":"My First Post"},{"content":"","date":null,"permalink":"/categories/nepal/","section":"","summary":"","title":"Nepal"},{"content":"","date":null,"permalink":"/tags/substack/","section":"","summary":"","title":"Substack"},{"content":"","date":null,"permalink":"/tags/sugam/","section":"","summary":"","title":"Sugam"},{"content":"I am a Computer Engineering student with a passion for Machine Learning, Natural Language Processing (NLP), and Full-Stack Development. I enjoy building intelligent systems, exploring AI applications, and creating interactive web solutions. My projects reflect my commitment to learning and implementing modern technologies to solve real-world problems.\nSkills and Expertise # Machine Learning \u0026amp; Deep Learning: Implementing models from scratch, fine-tuning pre-trained architectures, and working with frameworks like TensorFlow and PyTorch. Natural Language Processing (NLP): Developing spelling correction systems, text classification, and language modeling. Data Science \u0026amp; Analytics: Proficient in SQL, Excel, and Power BI for data analysis, visualization, and business intelligence. Web Development: Building full-stack applications using the MERN stack (MongoDB, Express.js, React.js, Node.js). Geographic Information Systems (GIS): Experienced in QGIS, Python, and Leaflet.js for spatial analysis, mapping, and geospatial data visualization. Data Visualization: Creating interactive maps, dashboards, and reports using Power BI, Matplotlib, and GeoJSON. ","date":null,"permalink":"/about/","section":"About","summary":"","title":"About"}]